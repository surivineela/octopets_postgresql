# PostgreSQL Integration Test Script
# This script tests the API endpoints and verifies data persistence

Write-Host "üîç Testing Octopets PostgreSQL Integration..." -ForegroundColor Cyan

# Wait for services to be ready
Write-Host "‚è≥ Waiting for services to start..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

# Test API endpoints
$apiBaseUrl = "https://localhost:7027"  # Default backend URL

try {
    # Test health endpoint
    Write-Host "`nüè• Testing health endpoint..." -ForegroundColor Green
    $healthResponse = Invoke-RestMethod -Uri "$apiBaseUrl/health" -Method Get -SkipCertificateCheck
    Write-Host "‚úÖ Health check: $($healthResponse.Status)" -ForegroundColor Green

    # Test get all listings
    Write-Host "`nüìã Testing get all listings..." -ForegroundColor Green
    $listingsResponse = Invoke-RestMethod -Uri "$apiBaseUrl/api/listings" -Method Get -SkipCertificateCheck
    Write-Host "‚úÖ Found $($listingsResponse.Count) listings" -ForegroundColor Green
    
    if ($listingsResponse.Count -gt 0) {
        $firstListing = $listingsResponse[0]
        Write-Host "   üìç Sample listing: $($firstListing.Name) - $($firstListing.Location)" -ForegroundColor Blue
    }

    # Test create a new listing
    Write-Host "`n‚ûï Testing create new listing..." -ForegroundColor Green
    $newListing = @{
        Name = "Test PostgreSQL Venue"
        Description = "A test venue to verify PostgreSQL integration"
        Price = 25.00
        Address = "123 Test Street"
        Location = "Test City"
        Type = "Restaurant"
        AllowedPets = @("Dogs", "Cats")
        Amenities = @("WiFi", "Parking", "Pet Menu")
        Photos = @("/images/test-venue.jpg")
    }
    
    $createResponse = Invoke-RestMethod -Uri "$apiBaseUrl/api/listings" -Method Post -Body ($newListing | ConvertTo-Json) -ContentType "application/json" -SkipCertificateCheck
    $newListingId = $createResponse.Id
    Write-Host "‚úÖ Created listing with ID: $newListingId" -ForegroundColor Green

    # Test get the specific listing
    Write-Host "`nüîç Testing get specific listing..." -ForegroundColor Green
    $specificListing = Invoke-RestMethod -Uri "$apiBaseUrl/api/listings/$newListingId" -Method Get -SkipCertificateCheck
    Write-Host "‚úÖ Retrieved listing: $($specificListing.Name)" -ForegroundColor Green

    # Test add a review
    Write-Host "`n‚≠ê Testing add review..." -ForegroundColor Green
    $newReview = @{
        ListingId = $newListingId
        Reviewer = "Test User"
        Rating = 5
        Comment = "Great place for testing PostgreSQL persistence!"
    }
    
    $reviewResponse = Invoke-RestMethod -Uri "$apiBaseUrl/api/reviews" -Method Post -Body ($newReview | ConvertTo-Json) -ContentType "application/json" -SkipCertificateCheck
    Write-Host "‚úÖ Created review with ID: $($reviewResponse.Id)" -ForegroundColor Green

    # Test get reviews for listing
    Write-Host "`nüìù Testing get reviews for listing..." -ForegroundColor Green
    $reviews = Invoke-RestMethod -Uri "$apiBaseUrl/api/listings/$newListingId/reviews" -Method Get -SkipCertificateCheck
    Write-Host "‚úÖ Found $($reviews.Count) reviews for the listing" -ForegroundColor Green

    Write-Host "`nüéâ All tests passed! PostgreSQL integration is working correctly." -ForegroundColor Green
    Write-Host "`nüìä Summary:" -ForegroundColor Cyan
    Write-Host "   ‚úÖ Health checks working" -ForegroundColor Green
    Write-Host "   ‚úÖ Database connection established" -ForegroundColor Green
    Write-Host "   ‚úÖ CRUD operations working" -ForegroundColor Green
    Write-Host "   ‚úÖ Data persistence verified" -ForegroundColor Green
    Write-Host "   ‚úÖ Migrations applied successfully" -ForegroundColor Green

} catch {
    Write-Host "‚ùå Test failed: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Please check if the application is running and the API is accessible." -ForegroundColor Yellow
}

Write-Host "`nüîó You can also test manually:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Aspire Dashboard: https://localhost:17013" -ForegroundColor Blue
Write-Host "   ‚Ä¢ API Documentation: https://localhost:7027/scalar/v1" -ForegroundColor Blue
Write-Host "   ‚Ä¢ Health Check: https://localhost:7027/health" -ForegroundColor Blue