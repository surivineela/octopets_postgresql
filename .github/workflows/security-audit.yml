# Security Audit Workflow for Octopets
# This workflow performs security assessments and creates GitHub issues for findings

name: SRE Security Audit

on:
  pull_request:
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/**'
      - 'azure.yaml'

permissions:
  issues: write
  contents: read
  security-events: write

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install security analysis tools
      run: |
        # Install .NET security tools
        dotnet tool install --global security-scan
        
        # Install Node.js security tools
        npm install -g audit-ci semver
        
        # Install additional security tools
        sudo apt-get update
        sudo apt-get install -y jq curl

    - name: Run Security Audit Script
      id: audit
      run: |
        chmod +x ./.github/scripts/security-audit.sh
        ./.github/scripts/security-audit.sh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Security Issue
      if: steps.audit.outputs.issues_found == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          // Read audit results
          const auditResults = fs.readFileSync('./security-audit-results.json', 'utf8');
          const results = JSON.parse(auditResults);
          
          // Create comprehensive issue body
          const issueBody = `# ðŸ”’ Security Audit Report - ${new Date().toISOString().split('T')[0]}
          
          ## Executive Summary
          Our automated SRE security audit has identified **${results.criticalIssues.length}** critical and **${results.warnings.length}** warning-level security concerns in the Octopets application.
          
          ## Critical Security Issues
          
          ${results.criticalIssues.map(issue => `
          ### ${issue.severity} - ${issue.title}
          
          **Risk Level:** ${issue.riskLevel}
          **Component:** ${issue.component}
          **Description:** ${issue.description}
          
          **Current Implementation:**
          \`\`\`${issue.currentImplementation.language || 'text'}
          ${issue.currentImplementation.code}
          \`\`\`
          
          **Recommended Solution:**
          ${issue.recommendedSolution}
          
          **Implementation Steps:**
          ${issue.implementationSteps.map((step, i) => `${i + 1}. ${step}`).join('\n')}
          
          **References:**
          ${issue.references.map(ref => `- [${ref.title}](${ref.url})`).join('\n')}
          
          ---
          `).join('\n')}
          
          ## Warnings and Recommendations
          
          ${results.warnings.map(warning => `
          - **${warning.title}**: ${warning.description}
          `).join('\n')}
          
          ## Compliance Status
          
          | Framework | Status | Score |
          |-----------|--------|-------|
          ${results.compliance.map(c => `| ${c.framework} | ${c.status} | ${c.score} |`).join('\n')}
          
          ## Recommended Action Plan
          
          ### Phase 1: Immediate Actions (Week 1)
          ${results.actionPlan.immediate.map((action, i) => `${i + 1}. ${action}`).join('\n')}
          
          ### Phase 2: Short-term Improvements (Weeks 2-4)
          ${results.actionPlan.shortTerm.map((action, i) => `${i + 1}. ${action}`).join('\n')}
          
          ### Phase 3: Long-term Enhancements (Month 2-3)
          ${results.actionPlan.longTerm.map((action, i) => `${i + 1}. ${action}`).join('\n')}
          
          ## Automated Remediation
          
          Some issues can be automatically fixed:
          - Run \`make security-fix-auto\` to apply automated fixes
          - Review and test changes before merging
          
          ## Next Audit
          The next automated security audit will run on: **${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}**
          
          ---
          
          *This issue was automatically generated by the SRE Security Audit workflow.*
          *For questions, contact the Security Team or check the [Security Runbook](./docs/security-runbook.md).*
          `;
          
          // Create or update existing security issue
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security-audit', 'sre-automated'],
            state: 'open'
          });
          
          const issueData = {
            title: `ðŸ”’ Security Audit Report - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['security-audit', 'sre-automated', 'high-priority', 'security']
          };
          
          if (existingIssues.data.length > 0) {
            // Update existing issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssues.data[0].number,
              ...issueData
            });
            console.log(`Updated existing security issue #${existingIssues.data[0].number}`);
          } else {
            // Create new issue
            const newIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ...issueData
            });
            console.log(`Created new security issue #${newIssue.data.number}`);
          }

    - name: Upload Security Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: |
          security-audit-results.json
          security-scan-*.log
          dependency-audit.json
        retention-days: 30

    - name: Post to Slack (Optional)
      if: steps.audit.outputs.critical_issues == 'true'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "ðŸš¨ Critical security issues found in Octopets! Check GitHub Issues for details."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Optional